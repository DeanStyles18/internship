import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'models/categories_model.dart'
    as category; // Ensure this model is correctly imported
import 'category_detail.dart'; // Import the category detail page
import 'dart:math'; // For random color selection

class CategoriesCarouselWidget extends StatefulWidget {
  @override
  _CategoriesCarouselWidgetState createState() =>
      _CategoriesCarouselWidgetState();
}

class _CategoriesCarouselWidgetState extends State<CategoriesCarouselWidget> {
  late PageController _pageController;
  final int _autoSlideDuration = 3;
  bool _isAutoSliding = true;
  int _currentIndex = 0;
  List<category.Data> _categories = [];
  bool _isLoading = true;

  final List<Color> _colors = [
    Color(0xFFE51E31), // Bright Red
    Color(0xFF158A08), // Bright Green
    Color(0xFF0C72EE), // Bright Blue
    Color(0xFFFF0090), // Magenta
    Color(0xFFDB148B), // Similar Magenta
    Color(0xFFB85D06), // Brown
    Color(0xFFE8125C), // Pink
    Color(0xFF951118), // Dark Maroon
    Color(0xFF1E3264), // Dark Blue
    Color(0xFFA56752), // Brownish Orange
  ];

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
    _fetchCategories();
  }

  Future<void> _fetchCategories() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final response = await http.get(Uri.parse(
          'https://prodapi.standups7.com/api/get-categories?pageNo=1&itemPerPage=10'));

      if (response.statusCode == 200) {
        final decodedData = jsonDecode(response.body);
        final autogenerated = category.Autogenerated.fromJson(decodedData);

        setState(() {
          _categories = autogenerated.data ?? [];
          _isLoading = false;
        });
        _startAutoSlide();
      } else {
        throw Exception('Failed to load categories');
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      print('Error fetching categories: $e');
    }
  }

  void _startAutoSlide() {
    if (_isAutoSliding) {
      Future.delayed(Duration(seconds: _autoSlideDuration), () {
        if (_pageController.hasClients) {
          _pageController.nextPage(
            duration: Duration(seconds: 1),
            curve: Curves.easeInOut,
          );
          _startAutoSlide();
        }
      });
    }
  }

  @override
  void dispose() {
    _isAutoSliding = false;
    _pageController.dispose();
    super.dispose();
  }

  List<Color> _generateRandomGradient() {
    final random = Random();
    return [
      _colors[random.nextInt(_colors.length)],
      _colors[random.nextInt(_colors.length)],
    ];
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Center(child: CircularProgressIndicator());
    }

    if (_categories.isEmpty) {
      return Center(child: Text('No categories available'));
    }

    final itemCount = _categories.length;
    final List<category.Data> carouselItems = [
      ..._categories,
      ..._categories, 
    ];

    return Column(
      children: [
      
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Categories of the Week',
                style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white),
              ),
              TextButton(
                onPressed: () {
                 
                },
                child: Text(
                  'See All',
                  style: TextStyle(fontSize: 16, color: Colors.white),
                ),
              ),
            ],
          ),
        ),
        SizedBox(
          height: 300, 
          child: Stack(
            children: [
              PageView.builder(
                controller: _pageController,
                itemCount: carouselItems.length,
                onPageChanged: (index) {
                  if (index == carouselItems.length - 1) {
                    // Reset to the start of the carousel
                    _pageController.jumpToPage(itemCount);
                  } else {
                    setState(() {
                      _currentIndex = index % itemCount;
                    });
                  }
                },
                itemBuilder: (context, index) {
                  final categoryItem = carouselItems[index % itemCount];
                  final randomColor = _colors[Random().nextInt(_colors.length)];

                  return GestureDetector(
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => CategoryPage(
                              categoryId: categoryItem.categoriesId ?? 0),
                        ),
                      );
                    },
                    child: Container(
                      margin: EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(
                            color: Colors.white, width: 4), 
                      ),
                      child: Stack(
                        fit: StackFit.expand,
                        children: [
                          
                          ClipRRect(
                            borderRadius: BorderRadius.circular(16),
                            child: ColorFiltered(
                              colorFilter: ColorFilter.mode(
                                randomColor.withOpacity(
                                    0.6), 
                                BlendMode.color,
                              ),
                              child: Image.asset(
                                'assets/categories.jpg', 
                                fit: BoxFit.cover,
                                color: Colors.black.withOpacity(
                                    0.2), 
                                colorBlendMode:
                                    BlendMode.darken, 
                              ),
                            ),
                          ),
                          // Gradient Overlay
                          Container(
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(16),
                              gradient: LinearGradient(
                                colors: [
                                  Colors.black.withOpacity(0.6),
                                  Colors.transparent,
                                ],
                                begin: Alignment.bottomCenter,
                                end: Alignment.topCenter,
                              ),
                            ),
                          ),
                         
                          Positioned(
                            bottom: 16,
                            left: 16,
                            right: 16,
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  categoryItem.categoryName ??
                                      'Unknown Category',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 20.0,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                SizedBox(height: 8.0),
                                Row(
                                  children: [
                                    Container(
                                      width: 40,
                                      height: 40,
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        border: Border.all(
                                            color: Colors.white, width: 2),
                                        color: Colors.black.withOpacity(0.6),
                                      ),
                                      child: Center(
                                        child: Text(
                                          '${(index % itemCount) + 1}',
                                          style: TextStyle(
                                            color: Colors.white,
                                            fontSize: 18,
                                          ),
                                        ),
                                      ),
                                    ),
                                    SizedBox(width: 16.0),
                                    Text(
                                      '${categoryItem.categoryName ?? 'Unknown Category'}',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 16,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
        ),
      ],
    );
  }
}
