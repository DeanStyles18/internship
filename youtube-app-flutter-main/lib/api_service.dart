import 'package:http/http.dart' as http;
import 'package:standups/api/api_url.dart';
import 'dart:convert';
import 'package:standups/models.dart' as homepage_models;
import 'package:standups/artist_models.dart' as artist_models;
import 'package:standups/models/aotw.dart' as aotw_models;
import 'package:standups/models/trending_artist.dart' as trending_artist_models;
import 'package:standups/models/trending_shorts.dart' as trending_shorts;
import 'package:standups/models/trending.dart' as Trending;
import 'package:standups/models/videos_model.dart' as videos;
import 'package:standups/models/categories_model.dart' as categories;
import 'package:standups/models/popular_short.dart' as popular_shorts;

class ApiService {
  final String baseUrl;

  ApiService(this.baseUrl);

  Future<List<trending_artist_models.Data>> fetchTrendingArtists() async {
    final response = await http.get(Uri.parse(
        'https://prodapi.standups7.com/api/show-all-artists?pageNo=1&itemPerPage=20&filter=trending_artist'));

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final List<dynamic> artistsJson = data['data'];
      return artistsJson
          .map((json) => trending_artist_models.Data.fromJson(json))
          .toList();
    } else {
      throw Exception('Failed to load trending artists');
    }
  }

  Future<List<aotw_models.Data>> fetchArtistsOfTheWeek(
      int pageNo, int itemPerPage) async {
    try {
      final response = await http.get(Uri.parse(
          'https://prodapi.standups7.com/api/show-all-artists?pageNo=$pageNo&itemPerPage=$itemPerPage&filter=artist_of_week'));

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        final artistsData = aotw_models.Autogenerated.fromJson(jsonResponse);
        return artistsData.data ?? [];
      } else {
        throw Exception('Failed to load artists');
      }
    } catch (e) {
      print('Error fetching artists of the week: $e');
      return [];
    }
  }

  Future<popular_shorts.Autogenerated> fetchPopularShorts() async {
    final response = await http.get(Uri.parse(
        'https://devapi.standups7.com/api/v1/playlist/get-trending-types?trending_type=SHORTS&pageNo=1&itemPerPage=50'));

    if (response.statusCode == 200) {
      return popular_shorts.Autogenerated.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Failed to load popular shorts');
    }
  }

  Future<categories.Autogenerated> fetchCategories() async {
    final response = await http.get(Uri.parse(
        'https://devapi.standups7.com/api/v1/category/get-public-categories?pageNo=1&itemPerPage=100'));

    if (response.statusCode == 200) {
      return categories.Autogenerated.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Failed to load categories');
    }
  }

  Future<videos.Autogenerated?> fetchAllVideos(
      int pageNo, int itemPerPage) async {
    try {
      final response = await http.get(Uri.parse(
          '${ApiUrls.baseURl}playlist/get-public-playlist?shortVideos=false&pageNo=1&itemPerPage=500'));

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(response.body);
        return videos.Autogenerated.fromJson(data);
      } else {
        print('Failed to load videos');
        return null;
      }
    } catch (e) {
      print('Error fetching data: $e');
      return null;
    }
  }

  Future<trending_shorts.Autogenerated> fetchVideos() async {
    try {
      final response = await http.get(Uri.parse(
          'https://devapi.standups7.com/api/v1/playlist/get-public-playlist?shortVideos=true&pageNo=1&itemPerPage=50'));

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonResponse = jsonDecode(response.body);
        return trending_shorts.Autogenerated.fromJson(jsonResponse);
      } else {
        throw Exception('Failed to load videos: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Failed to load videos: $e');
    }
  }

  Future<Trending.Autogenerated> fetchTrendingVideos() async {
    try {
      final response = await http.get(Uri.parse(
          '${ApiUrls.baseURl}playlist/get-public-playlist?shortVideos=false&pageNo=1&itemPerPage=10'));

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonResponse = jsonDecode(response.body);
        return Trending.Autogenerated.fromJson(jsonResponse);
      } else {
        throw Exception(
            'Failed to load trending videos: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Failed to load trending videos: $e');
    }
  }

  Future<homepage_models.Autogenerated> fetchHomepageData() async {
    try {
      final response = await http.get(Uri.parse(baseUrl));

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonResponse = jsonDecode(response.body);
        return homepage_models.Autogenerated.fromJson(jsonResponse);
      } else {
        throw Exception('Failed to load homepage data: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Failed to load homepage data: $e');
    }
  }

  Future<artist_models.Autogenerated> fetchArtistDetails(int artistId) async {
    try {
      final response = await http.get(Uri.parse(
          'https://prodapi.standups7.com/api/artist-playlist?artist_id=$artistId&pageNo=1&itemPerPage=20&filter=all'));

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonResponse = jsonDecode(response.body);
        return artist_models.Autogenerated.fromJson(jsonResponse);
      } else {
        throw Exception(
            'Failed to load artist details: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Failed to load artist details: $e');
    }
  }

  Future<artist_models.Autogenerated> fetchAllArtists100(int item) async {
    try {
      final response = await http.get(Uri.parse(
          '${ApiUrls.baseURl}artist/get-public-artist?pageNo=1&itemPerPage=$item'));

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonResponse = jsonDecode(response.body);
        return artist_models.Autogenerated.fromJson(jsonResponse);
      } else {
        throw Exception(
            'Failed to load all artists with 100 items: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Failed to load all artists with 100 items: $e');
    }
  }

  Future<artist_models.Autogenerated> fetchArtistData() async {
    try {
      final response = await http.get(Uri.parse(baseUrl));

      if (response.statusCode == 200) {
        final Map<String, dynamic> jsonResponse = jsonDecode(response.body);
        return artist_models.Autogenerated.fromJson(jsonResponse);
      } else {
        throw Exception('Failed to load artist data: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Failed to load artist data: $e');
    }
  }
}
