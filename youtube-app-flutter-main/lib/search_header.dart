import 'dart:convert';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:standups/artist_detail.dart';
import 'package:standups/category_detail.dart';
import 'models/artist_names.dart'
    as artist; 
import 'models/category_names.dart'
    as category; 

class SearchHeader extends StatefulWidget implements PreferredSizeWidget {
  final bool isSearching;
  final TextEditingController searchController;
  final VoidCallback onSearchToggle;
  final ValueChanged<String> onSubmitted;

  SearchHeader({
    required this.isSearching,
    required this.searchController,
    required this.onSearchToggle,
    required this.onSubmitted,
  });

  @override
  _SearchHeaderState createState() => _SearchHeaderState();

  @override
  Size get preferredSize => Size.fromHeight(kToolbarHeight);
}

class _SearchHeaderState extends State<SearchHeader> {
  List<artist.Data>? _allArtistList = [];
  List<artist.Data>? _filteredArtistList = [];
  List<category.Data>? _allCategoryList = [];
  List<category.Data>? _filteredCategoryList = [];
  Timer? _debounce;
  OverlayEntry? _overlayEntry;
  final GlobalKey _searchFieldKey = GlobalKey();

  void debounce(VoidCallback action,
      [Duration duration = const Duration(milliseconds: 300)]) {
    if (_debounce?.isActive ?? false) _debounce!.cancel();
    _debounce = Timer(duration, action);
  }

  Future<void> _fetchArtists(String query) async {
    setState(() {});

    try {
      final response = await http.get(
        Uri.parse(
            'https://devapi.standups7.com/api/v1/artist/get-public-artist?pageNo=1&itemPerPage=10'),
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        artist.Autogenerated artistResponse =
            artist.Autogenerated.fromJson(jsonResponse);
        setState(() {
          _allArtistList = artistResponse.data;
          _filterArtists(query);
        });
      } else {
        throw Exception('Failed to load artists');
      }
    } catch (error) {
      print('Error fetching artists: $error');
    } finally {
      setState(() {});
    }
  }

  Future<void> _fetchCategories(String query) async {
    setState(() {});

    try {
      final response = await http.get(
        Uri.parse(
            'https://devapi.standups7.com/api/v1/category/get-public-categories?pageNo=1&itemPerPage=10'),
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        category.Autogenerated categoryResponse =
            category.Autogenerated.fromJson(jsonResponse);
        setState(() {
          _allCategoryList = categoryResponse.data;
          _filterCategories(query);
        });
      } else {
        throw Exception('Failed to load categories');
      }
    } catch (error) {
      print('Error fetching categories: $error');
    } finally {
      setState(() {});
    }
  }

  void _filterArtists(String query) {
    if (_allArtistList != null) {
      setState(() {
        _filteredArtistList = _allArtistList!.where((artist) {
          final artistName = artist.artistName ?? '';
          return artistName.toLowerCase().contains(query.toLowerCase());
        }).toList();
        _showOverlay(isArtist: true);
      });
    }
  }

  void _filterCategories(String query) {
    if (_allCategoryList != null) {
      setState(() {
        _filteredCategoryList = _allCategoryList!.where((category) {
          final categoryName = category.categoryName ?? '';
          return categoryName.toLowerCase().contains(query.toLowerCase());
        }).toList();
        _showOverlay(isArtist: false);
      });
    }
  }

  void _showOverlay({required bool isArtist}) {
    if (_overlayEntry != null) _overlayEntry!.remove();

    final overlay = Overlay.of(context);
    final searchBoxRenderBox =
        _searchFieldKey.currentContext?.findRenderObject() as RenderBox?;

    if (searchBoxRenderBox == null) return;

    final searchBoxPosition = searchBoxRenderBox.localToGlobal(Offset.zero);
    final searchBoxWidth = searchBoxRenderBox.size.width;

    _overlayEntry = OverlayEntry(
      builder: (context) {
        return Positioned(
          top: searchBoxPosition.dy + searchBoxRenderBox.size.height,
          left: searchBoxPosition.dx,
          width: searchBoxWidth,
          child: Material(
            color: Colors.transparent,
            child: Container(
              decoration: BoxDecoration(
                color: const Color.fromARGB(255, 0, 0, 0),
                borderRadius: BorderRadius.circular(6.0),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 4,
                    offset: Offset(0, 4),
                  ),
                ],
              ),
              constraints: BoxConstraints(
                maxHeight: MediaQuery.of(context).size.height /
                    3, // Constrain the height
              ),
              child: Padding(
                padding: EdgeInsets.zero,
                child: Column(
                  children: [
                    Expanded(
                      child: isArtist
                          ? _filteredArtistList != null &&
                                  _filteredArtistList!.isNotEmpty
                              ? ListView.builder(
                                  itemCount: _filteredArtistList!.length,
                                  itemBuilder: (context, index) {
                                    final artist = _filteredArtistList![index];
                                    return ListTile(
                                      tileColor: Color.fromRGBO(
                                          169, 4, 20, 1), 
                                      title: Text(
                                          artist.artistName ?? 'Unknown',
                                          style: TextStyle(
                                              color:
                                                  Colors.white)), 
                                      onTap: () {
                                        Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                            builder: (context) =>
                                                ArtistDetailsPage(
                                              artistId: artist.artistId ?? 0,
                                                  data: null,
                                            ),
                                          ),
                                        );
                                        setState(() {
                                          _filteredArtistList = [];
                                          _overlayEntry?.remove();
                                          _overlayEntry = null;
                                        });
                                        widget.onSubmitted(artist.artistName!);
                                      },
                                    );
                                  },
                                )
                              : Center(
                                  child: Text('No artists found',
                                      style: TextStyle(
                                          color: Colors.white))) 
                          : _filteredCategoryList != null &&
                                  _filteredCategoryList!.isNotEmpty
                              ? ListView.builder(
                                  itemCount: _filteredCategoryList!.length,
                                  itemBuilder: (context, index) {
                                    final category =
                                        _filteredCategoryList![index];
                                    return ListTile(
                                      tileColor: Color.fromRGBO(
                                          169, 4, 20, 1), 
                                      title: Text(
                                          category.categoryName ?? 'Unknown',
                                          style: TextStyle(
                                              color:
                                                  Colors.white)),
                                      onTap: () {
                                        Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                            builder: (context) => CategoryPage(
                                              categoryId:
                                                  category.categoriesId ?? 0,
                                            ),
                                          ),
                                        );
                                        setState(() {
                                          _filteredCategoryList = [];
                                          _overlayEntry?.remove();
                                          _overlayEntry = null;
                                        });
                                        widget.onSubmitted(
                                            category.categoryName!);
                                      },
                                    );
                                  },
                                )
                              : Center(
                                  child: Text('No categories found',
                                      style: TextStyle(
                                          color: Colors.white))), // White text
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
    overlay.insert(_overlayEntry!);
  }

  @override
  void initState() {
    super.initState();
    widget.searchController.addListener(() {
      debounce(() {
        if (widget.searchController.text.isNotEmpty) {
          _fetchArtists(widget.searchController.text);
          _fetchCategories(widget.searchController.text);
        } else {
          setState(() {
            _filteredArtistList = [];
            _filteredCategoryList = [];
            _overlayEntry?.remove();
            _overlayEntry = null;
          });
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return AppBar(
      backgroundColor: Color.fromRGBO(1, 1, 1, 1),
      leading: Container(
        height: 40,
        width: 40,
        padding: EdgeInsets.all(1.0),
        decoration: BoxDecoration(
          color: Color.fromARGB(255, 0, 0, 0), 
          borderRadius: BorderRadius.circular(6.0), 
        ),
        child: IconButton(
          icon: Icon(Icons.account_circle,
              color: Color.fromRGBO(194, 19, 37, 1),
              size: 42.0),
          onPressed: () {
            
          },
        ),
      ),
      title: widget.isSearching
          ? Stack(
              children: [
                Container(
                  padding:
                      EdgeInsets.only(right: 40),
                  decoration: BoxDecoration(
                    color: Colors.black,
                    border: Border.all(
                        color: Color.fromRGBO(169, 4, 20, 1)), 
                    borderRadius: BorderRadius.circular(6.0),
                  ),
                  child: TextField(
                    key: _searchFieldKey,
                    controller: widget.searchController,
                    decoration: InputDecoration(
                      hintText: 'Search...',
                      hintStyle:
                          TextStyle(color: Color.fromARGB(255, 247, 232, 231)),
                      border: InputBorder.none,
                      contentPadding: EdgeInsets.symmetric(horizontal: 12.0),
                    ),
                    style: TextStyle(color: Colors.white),
                    onSubmitted: widget.onSubmitted,
                  ),
                ),
                Positioned(
                  right: 0,
                  top: 0,
                  bottom: 0,
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.black,
                      border: Border.all(
                          color: Color.fromRGBO(169, 4, 20, 1)), 
                      borderRadius: BorderRadius.only(
                        topRight: Radius.circular(6.0),
                        bottomRight: Radius.circular(6.0),
                      ),
                    ),
                    child: IconButton(
                      icon: Icon(Icons.close, color: Colors.white, size: 24.0),
                      onPressed: () {
                        widget.searchController.clear();
                        setState(() {
                          _filteredArtistList = [];
                          _filteredCategoryList = [];
                          _overlayEntry?.remove();
                          _overlayEntry = null;
                        });
                        widget.onSearchToggle();
                      },
                    ),
                  ),
                ),
              ],
            )
          : SvgPicture.asset(
              'assets/icon.svg',
              height: 20,
              width: 60,
            ),
      actions: [
        if (!widget.isSearching)
          Container(
            height: 40,
            width: 40,
            padding: EdgeInsets.all(1.0), 
            decoration: BoxDecoration(
              color: Color.fromRGBO(169, 4, 20, 1), 
              borderRadius: BorderRadius.circular(6.0), 
            ),
            child: IconButton(
              icon: Icon(Icons.search,
                  color: Colors.white, size: 24.0), 
              onPressed: widget.onSearchToggle,
            ),
          ),
      ],
    );
  }

  @override
  void dispose() {
    _debounce?.cancel();
    _overlayEntry?.remove();
    widget.searchController.dispose();
    super.dispose();
  }
}
