import 'dart:async';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'contants/app_contants.dart';
import 'models/categories_model.dart' as categories;
import 'models/category_detail.dart' as videos;
import 'package:cached_network_image/cached_network_image.dart';
import 'package:youtube_player_flutter/youtube_player_flutter.dart';
import 'video_detail.dart';
import 'package:flutter_html/flutter_html.dart';

class CategoryPage extends StatefulWidget {
  final int categoryId;

  CategoryPage({required this.categoryId});

  @override
  _CategoryPageState createState() => _CategoryPageState();
}

class _CategoryPageState extends State<CategoryPage> {
  late Future<categories.Data?> _futureCategoryData;
  late Future<videos.Autogenerated> _futureVideoData;
  final ScrollController _scrollController = ScrollController();

  YoutubePlayerController? _youtubePlayerController;
  bool _isPlaying = false;

  final List<Color> gradientColors = [
    Color(0xFFE51E31), // Bright Red
    Color(0xFF158A08), // Bright Green
    Color(0xFF0C72EE), // Bright Blue
    Color(0xFFFF0090), // Magenta
  ];

  @override
  void initState() {
    super.initState();
    _futureCategoryData = fetchCategoryData(widget.categoryId);
    _futureVideoData = fetchVideos(widget.categoryId);

    _scrollController.addListener(() {
      if (_scrollController.position.pixels > 400) {
        _pauseVideo();
      } else {
        _resumeVideo();
      }
    });
  }

  @override
  void dispose() {
    _pauseVideo();
    _scrollController.dispose();
    _youtubePlayerController?.dispose();
    super.dispose();
  }

  Future<categories.Data?> fetchCategoryData(int categoryId) async {
    final response = await http.get(Uri.parse(
        'https://devapi.standups7.com/api/v1/category/get-public-categories?pageNo=1&itemPerPage=100'));

    if (response.statusCode == 200) {
      final jsonResponse = json.decode(response.body);
      final autogenerated = categories.Autogenerated.fromJson(jsonResponse);
      return autogenerated.data?.firstWhere(
        (category) => category.categoriesId == categoryId,
      );
    } else {
      throw Exception('Failed to load category data');
    }
  }

  Future<videos.Autogenerated> fetchVideos(int categoryId) async {
    final response = await http.get(Uri.parse(
        'https://devapi.standups7.com/api/v1/playlist/get-videos-by-categories?categories_id=$categoryId&pageNo=1&itemPerPage=25'));

    if (response.statusCode == 200) {
      final jsonResponse = json.decode(response.body);
      return videos.Autogenerated.fromJson(jsonResponse);
    } else {
      throw Exception('Failed to load video data');
    }
  }

  void _initializeYoutubePlayer(String videoUrl) {
    final videoId = YoutubePlayer.convertUrlToId(videoUrl)!;
    _youtubePlayerController = YoutubePlayerController(
      initialVideoId: videoId,
      flags: YoutubePlayerFlags(
        autoPlay: true,
        mute: false,
      ),
    )..addListener(() {
        if (_youtubePlayerController!.value.isPlaying != _isPlaying) {
          setState(() {
            _isPlaying = _youtubePlayerController!.value.isPlaying;
          });
        }
      });
  }

  void _pauseVideo() {
    if (_youtubePlayerController != null && _isPlaying) {
      _youtubePlayerController?.pause();
      setState(() {
        _isPlaying = false;
      });
    }
  }

  void _resumeVideo() {
    if (_youtubePlayerController != null && !_isPlaying) {
      _youtubePlayerController?.play();
      setState(() {
        _isPlaying = true;
      });
    }
  }

  void _navigateToVideoDetail(String videoTitle) async {
    final int? videoId = await _getVideoIdByTitle(videoTitle);
    if (videoId != null) {
      _pauseVideo();
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => VideoDetailPage(finalVideoPageId: videoId.toString()),
        ),
      ).then((_) {
        _pauseVideo();
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Video not found')),
      );
    }
  }

  Future<int?> _getVideoIdByTitle(String title) async {
    final videoData = await _futureVideoData;
    for (final video in videoData.data!) {
      if (video.videoTitle == title) {
        return video.videosFinalDataUniqueId;
      }
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [_getFixedGradientColor(), Colors.transparent],
                begin: Alignment.topCenter,
                end: Alignment(0.0, 0.6),
              ),
            ),
          ),
          FutureBuilder<categories.Data?>(
            future: _futureCategoryData,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              } else if (snapshot.hasError) {
                return Center(
                  child: Text('Error: ${snapshot.error}',
                      style: TextStyle(color: Colors.white)),
                );
              } else if (!snapshot.hasData || snapshot.data == null) {
                return Center(
                  child: Text('No category data available',
                      style: TextStyle(color: Colors.white)),
                );
              } else {
                final categoryData = snapshot.data;

                return SingleChildScrollView(
                  controller: _scrollController,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        AppContents.backFunctionWidget(context),
                        Text(
                          categoryData?.categoryName ?? 'Unknown',
                          style: TextStyle(
                            fontSize: 22,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        SizedBox(height: 12),
                        FutureBuilder<videos.Autogenerated>(
                          future: _futureVideoData,
                          builder: (context, videoSnapshot) {
                            if (videoSnapshot.connectionState ==
                                ConnectionState.waiting) {
                              return Center(child: CircularProgressIndicator());
                            } else if (videoSnapshot.hasError) {
                              return Center(
                                child: Text('Error: ${videoSnapshot.error}',
                                    style: TextStyle(color: Colors.white)),
                              );
                            } else if (!videoSnapshot.hasData ||
                                videoSnapshot.data?.data == null ||
                                videoSnapshot.data!.data!.isEmpty) {
                              return Center(
                                child: Text('No videos available',
                                    style: TextStyle(color: Colors.white)),
                              );
                            } else {
                              final firstVideo =
                                  videoSnapshot.data!.data!.first;

                              if (_youtubePlayerController == null) {
                                _initializeYoutubePlayer(firstVideo.videoLink!);
                              }

                              return Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  _buildYoutubePlayer(firstVideo),
                                  SizedBox(height: 20),
                                  _buildPlaylistSection(
                                      videoSnapshot.data!.data!),
                                ],
                              );
                            }
                          },
                        ),
                      ],
                    ),
                  ),
                );
              }
            },
          ),

        ],
      ),
    );
  }

  Widget _buildYoutubePlayer(videos.Data firstVideo) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 0.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            firstVideo.videoTitle ?? 'Unknown Title',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 16),
          if (_youtubePlayerController != null)
            ClipRRect(
              borderRadius: BorderRadius.circular(
                  16.0), // Set border radius for curved edges
              child: Container(
                height: 200,
                width: double.infinity,
                child: YoutubePlayer(
                  controller: _youtubePlayerController!,
                  showVideoProgressIndicator: true,
                  onReady: () {
                  
                  },
                ),
              ),
            ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
             
              _navigateToVideoDetail(firstVideo
                  .videoTitle!);
            },
            child: Text('Watch Video'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.black,
              foregroundColor: Colors.white,
              minimumSize: Size(double.infinity, 48), 
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
          ),
          SizedBox(height: 15),

          FutureBuilder<categories.Data?>(
            future: _futureCategoryData,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(
                    child:
                        CircularProgressIndicator());
              } else if (snapshot.hasError) {
                return Container(
                  padding: EdgeInsets.all(16.0),
                  decoration: BoxDecoration(
                    color: Colors.black, 
                    border: Border.all(
                        color: Colors.white, width: 1.5),
                    borderRadius: BorderRadius.circular(12.0), 
                  ),
                  child: Text('Error: ${snapshot.error}',
                      style: TextStyle(color: Colors.white)),
                );
              } else if (!snapshot.hasData || snapshot.data == null) {
                return Container(
                  padding: EdgeInsets.all(16.0),
                  decoration: BoxDecoration(
                    color: Colors.black, 
                    border: Border.all(
                        color: Colors.white, width: 1.5),
                    borderRadius: BorderRadius.circular(12.0), 
                  ),
                  child: Text('No description available',
                      style: TextStyle(color: Colors.white)),
                );
              } else {
                final categoryData = snapshot.data;
                return categoryData?.categoryDescription !=null ?
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Description',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    SizedBox(height: 16),
                    Container(
                      padding:
                          EdgeInsets.all(16.0),
                      decoration: BoxDecoration(
                        color: Colors.black,
                        border: Border.all(
                            color: Colors.white, width: 1.5),
                        borderRadius: BorderRadius.circular(12.0),
                      ),
                      child: Html(
                        data: categoryData?.categoryDescription ?? 'No description',
                        style: {
                          "body": Style(
                            fontSize:
                                FontSize.large,
                            color: Colors.white70,
                          ),
                        },
                      ),
                    ),
                  ],
                ):SizedBox();
              }
            },
          ),
        ],
      ),
    );
  }

  Widget _buildPlaylistSection(List<videos.Data> videoList) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Playlist',
          style: TextStyle(
            fontSize: 18,
            color: Colors.white,
          ),
        ),
        SizedBox(height: 12),
        _buildPlaylist(videoList),
      ],
    );
  }

  Widget _buildPlaylist(List<videos.Data> videoList) {
    return ListView.builder(
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      itemCount: videoList.length,
      padding: EdgeInsets.zero,
      itemBuilder: (context, index) {
        final video = videoList[index];

        return GestureDetector(
          onTap: () => _navigateToVideoDetail(video.videoTitle!),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(2.0),
            child: Container(
              margin: const EdgeInsets.symmetric(vertical: 8.0),
              decoration: BoxDecoration(
                color: Colors.black,

                border: Border.all(
                  color: _getFixedColor(index),
                  width: 1.0,
                ),
              ),
              child: ListTile(

                leading: CachedNetworkImage(
                  imageUrl: video.videoMediumImg ?? '',
                  placeholder: (context, url) => CircularProgressIndicator(),
                  errorWidget: (context, url, error) => Icon(Icons.error),
                ),
                title: Text(
                  video.videoTitle ?? 'Unknown Title',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                ),
                subtitle: Text(
                  video.videoDuration ?? 'Unknown Duration',
                  style: TextStyle(color: Colors.white),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Color _getFixedGradientColor() {
    return gradientColors[0]; 
  }

  Color _getFixedColor(int index) {
    return gradientColors[
        index % gradientColors.length]; 
  }
}
