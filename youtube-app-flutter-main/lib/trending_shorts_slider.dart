import 'package:flutter/material.dart';
import 'package:standups/contants/app_contants.dart';
import 'models/trending_shorts.dart' as trending_shorts;
import 'api_service.dart';

class TrendingShortsSlider extends StatefulWidget {
  @override
  _TrendingShortsSliderState createState() => _TrendingShortsSliderState();
}

class _TrendingShortsSliderState extends State<TrendingShortsSlider> {
  late Future<trending_shorts.Autogenerated> futureVideos;
  final ApiService apiService = ApiService(
    'https://devapi.standups7.com/api/v1/playlist/get-public-playlist?shortVideos=true&pageNo=1&itemPerPage=50',
  );

  @override
  void initState() {
    super.initState();
    futureVideos = apiService.fetchVideos();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Trending Shorts',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              InkWell(
                onTap: (){
                  Navigator.pushNamed(
                    context,
                    '/shorts',
                    arguments: null,
                  );
                },
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: Icon(Icons.arrow_forward_ios,color: Colors.white,size: 15,),
                ),
              )
            ],
          ),
        ),
        SizedBox(height: 16),
        FutureBuilder<trending_shorts.Autogenerated>(
          future: futureVideos,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return Center(child: CircularProgressIndicator());
            } else if (snapshot.hasError) {
              return Center(child: Text('Error: ${snapshot.error}'));
            } else if (snapshot.hasData && snapshot.data != null) {
              final videos = snapshot.data!.data;
              if (videos == null || videos.isEmpty) {
                return Center(child: Text('No trending shorts available.'));
              }

              List<trending_shorts.Data>videoPairs = [];
              for (int i = 0; i < videos.length; i ++){
                videoPairs.add(videos[i]);
              }

              return Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: GridView.builder(
                  padding: EdgeInsets.zero,
                  itemCount:videoPairs.length > 9 ? 9 :  videoPairs.length,
                  physics: NeverScrollableScrollPhysics(),
                  shrinkWrap: true,
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 3, // 3 items per row

                    crossAxisSpacing: 8.0,
                    mainAxisSpacing: 8.0,
                    mainAxisExtent: 180
                  ),
                  itemBuilder: (context, index) {
                    final video = videoPairs[index];
                    return GestureDetector(
                      onTap: () {
                        Navigator.pushNamed(
                          context,
                          '/shorts',
                          arguments: videoPairs[index].videosFinalDataId.toString(),
                        );
                      },
                      child: Container(
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(6.0),
                        ),
                        child: Stack(
                          children: [
                            Container(
                              child: AppContents.placeHolderImage(
                                imageURl: video.videoMediumImg,
                                height: double.infinity,
                                width: double.infinity,
                                rightRadius: 6,
                                topRadius: 6,
                                bottomRightRidus: 6,
                                bottomRadius: 6,
                              ),
                            ),
                            Align(
                              alignment: Alignment.bottomCenter,
                              child: Container(
                                width: double.infinity,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.only(
                                    bottomLeft: Radius.circular(10),
                                    bottomRight: Radius.circular(10),
                                  ),
                                  color: Colors.black.withOpacity(0.4),
                                ),
                                child: Padding(
                                  padding: const EdgeInsets.symmetric(horizontal: 15.0, vertical: 10),
                                  child: Text(
                                    video.videoTitle ?? "Unknown",
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      shadows: [
                                        Shadow(
                                          blurRadius: 8.0,
                                          color: Colors.black,
                                          offset: Offset(2.0, 2.0),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              );

            } else {
              return Center(child: Text('No data available.'));
            }
          },
        ),
      ],
    );
  }
}
