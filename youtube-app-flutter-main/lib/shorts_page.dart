import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:standups/controller/dash_controller.dart';
import 'package:standups/navigation_bar.dart';
import 'package:video_player/video_player.dart';
import 'package:youtube_player_flutter/youtube_player_flutter.dart';
import 'contants/actionstoolbar.dart';
import 'models/shorts_model.dart' as shorts;
import 'package:flutter_svg/flutter_svg.dart';
import 'package:url_launcher/url_launcher.dart';

class ShortsDetailPage extends StatefulWidget {
  final String videoId;

  const ShortsDetailPage({Key? key, required this.videoId}) : super(key: key);

  @override
  _ShortsDetailPageState createState() => _ShortsDetailPageState();
}

class _ShortsDetailPageState extends State<ShortsDetailPage> {
  late Future<shorts.Autogenerated> futureVideos;
  late PageController pageController;
  // List<shorts.Data> videos = [];
  int currentIndex = 0;
  int currentPage = 1;
  bool isLoadingMore = false;
  bool useNewApi = false;
  bool showToggleButton = true;
  late YoutubePlayerController videoController;

  @override
  void initState() {
    super.initState();
    //futureVideos = fetchInitialVideos();
    pageController = PageController(
      initialPage: 0,
      viewportFraction: 1,
    );

    WidgetsBinding.instance.addPostFrameCallback((_) {
      Get.find<DashController>()
          .getPublicPlayList(videoId: widget.videoId, page: currentPage);

      setState(() {});
    });
  }

  // Future<shorts.Autogenerated> fetchInitialVideos() async {
  //   final response = await http.get(Uri.parse(
  //       'https://prodapi.standups7.com/api/v1/playlist/get-public-playlist?video_id=${widget.videoId}&shortVideos=true&pageNo=1&itemPerPage=10'));
  //
  //   if (response.statusCode == 200) {
  //     return shorts.Autogenerated.fromJson(json.decode(response.body));
  //   } else {
  //     throw Exception('Failed to load videos');
  //   }
  // }

  // Future<void> fetchMoreVideos() async {
  //   if (isLoadingMore) return;
  //   isLoadingMore = true;
  //
  //   String url = useNewApi
  //       ? 'https://prodapi.standups7.com/api/v1/playlist/get-public-playlist?shortVideos=true&pageNo=$currentPage&itemPerPage=500'
  //       : 'https://prodapi.standups7.com/api/v1/playlist/get-public-playlist?video_id=${widget.videoId}&shortVideos=true&pageNo=1&itemPerPage=10';
  //
  //   final response = await http.get(Uri.parse(url));
  //
  //   if (response.statusCode == 200) {
  //     shorts.Autogenerated newVideos =
  //         shorts.Autogenerated.fromJson(json.decode(response.body));
  //     setState(() {
  //       if (useNewApi) {
  //         videos.addAll(newVideos.data!);
  //         currentPage++;
  //       } else {
  //         videos = newVideos.data!;
  //         currentPage = 2;
  //       }
  //       isLoadingMore = false;
  //     });
  //   } else {
  //     throw Exception('Failed to load more videos');
  //   }
  // }
  //
  void _onPageChanged(int index, int length) {
    setState(() {
      currentIndex = index;
    });
    print("currentIndex=>$currentIndex");

    if ((length - currentIndex) < 4) {
      setState(() {
        currentPage++;
      });
      Get.find<DashController>()
          .getPublicPlayList(videoId: widget.videoId, page: currentPage);
    }

    /*if (index == videos.length - 1) {
      fetchMoreVideos();
    }*/
  }

  // void _toggleSeeAllShorts() {
  //   setState(() {
  //     useNewApi = true;
  //     currentPage = 1;
  //     videos.clear();
  //     fetchMoreVideos();
  //     showToggleButton = false;
  //   });
  // }

  void _stopVideoPlayback() {
    videoController.pause();
  }

  Future<void> _launchURL(String url) async {
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  void dispose() {
    pageController.dispose();
    _stopVideoPlayback();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        // Added SafeArea to prevent overlap
        child: GetBuilder<DashController>(
            builder: (dashController) => feedVideos(dashController)
            // Stack(
            //   children: [
            //     PageView.builder(
            //       controller: PageController(
            //         initialPage: 0,
            //         viewportFraction: 1,
            //       ),
            //       itemCount: dashController.shortData!=null && dashController.shortData!.data != null
            //           ? dashController.shortData!.data!.length
            //           : 0,
            //       onPageChanged: (index) {
            //         index = index % (dashController.shortData!.data!.length);
            //         // feedViewModel.changeVideo(index);
            //       },
            //       scrollDirection: Axis.vertical,
            //       itemBuilder: (context, index) {
            //         index = index % (dashController.shortData!.data!.length);
            //         return videoCard(dashController.shortData!.data![index]);
            //       },
            //     ),
            //     /*PageView.builder(
            //       controller: pageController,
            //       onPageChanged:(value) {
            //         _onPageChanged(value,dashController.shortData!.data!.length);
            //       },
            //       itemCount:dashController.shortData!=null && dashController.shortData!.data != null
            //           ? dashController.shortData!.data!.length
            //           : 0,
            //       scrollDirection: Axis.vertical,
            //       itemBuilder: (context, index) {
            //         return VideoPlayerWidget(
            //           videoTitle: dashController.shortData!.data![index].videoTitle!,
            //           videoUrl: dashController.shortData!.data![index].videoLink!,
            //           videoStatsLink: dashController.shortData!.data![index].videoLink!,
            //           onVideoControllerCreated: (controller) {
            //             videoController = controller;
            //           },
            //           pageController: pageController, // Pass the PageController
            //         );
            //       },
            //     ),*/
            //     // Positioned(
            //     //   bottom: 0.0,
            //     //   left: 0,
            //     //   right: 0,
            //     //   child: Container(
            //     //     decoration: BoxDecoration(
            //     //       borderRadius: BorderRadius.circular(8.0),
            //     //       color: Colors.black.withOpacity(0.4),
            //     //     ),
            //     //     padding: EdgeInsets.symmetric(horizontal: 10.0, vertical: 5.0),
            //     //     child: Column(
            //     //       crossAxisAlignment: CrossAxisAlignment.start,
            //     //       children: [
            //     //         Row(
            //     //           children: [
            //     //             Text(
            //     //               dashController.shortData!=null && dashController.shortData!.data!=null ? dashController.shortData!.data![currentIndex].artistName!:"",
            //     //               style: TextStyle(
            //     //                 color: Colors.white,
            //     //                 fontWeight: FontWeight.bold,
            //     //                 fontSize: 16.0,
            //     //               ),
            //     //               textAlign: TextAlign.start,
            //     //               maxLines: 1,
            //     //               overflow: TextOverflow.ellipsis,
            //     //             )
            //     //           ],
            //     //         ),
            //     //         Text(
            //     //           dashController.shortData!=null && dashController.shortData!.data!=null && dashController.shortData!.data!.isNotEmpty
            //     //               ? dashController.shortData!.data![currentIndex].videoTitle!
            //     //               : '',
            //     //           style: TextStyle(
            //     //             color: Colors.white,
            //     //             fontWeight: FontWeight.bold,
            //     //             fontSize: 12.0,
            //     //           ),
            //     //           textAlign: TextAlign.start,
            //     //           maxLines: 1,
            //     //           overflow: TextOverflow.ellipsis,
            //     //         ),
            //     //       ],
            //     //     ),
            //     //   ),
            //     // ),
            //     // _buildHeader(),
            //   ],
            // ),
            ),
      ),
      bottomNavigationBar: BottomNavBarWidget(
        currentRoute: '/shorts',
        onNavigate: _stopVideoPlayback, // Pass the stop function
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      color: Colors.transparent,
      height: 50.0,
      padding: EdgeInsets.symmetric(horizontal: 16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Row(
            children: [
              SvgPicture.asset(
                'assets/icon.svg',
                height: 30,
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget feedVideos(DashController dashController) {
    return Stack(
      children: [
        PageView.builder(
          controller: pageController,
          itemCount: dashController.shortData != null &&
                  dashController.shortData!.data != null
              ? dashController.shortData!.data!.length
              : 0,
          onPageChanged: (index) {
            index = index % (dashController.shortData!.data!.length);
            dashController.changeVideo(index);

            print("index=>$index");

            dashController.getVideoDetails(
                videoId: dashController.shortData!.data![index].videoLink!);

            // Load more videos if near the end of the current playlist
            if ((dashController.shortData!.data!.length - index) < 10) {
              setState(() {
                currentPage++;
              });
              dashController.getPublicPlayList(
                videoId: widget.videoId,
                page: currentPage,
              );
            }
          },
          scrollDirection: Axis.vertical,

          // Adding smoother physics
          physics: CustomPageViewScrollPhysics(),

          itemBuilder: (context, index) {
            index = index % (dashController.shortData!.data!.length);

            // Wrapping the whole page in a GestureDetector to detect vertical drag across the screen
            return Stack(
              children: [
                VideoPlayerWidget(
                  videoTitle:
                      dashController.shortData!.data![index].videoTitle!,
                  videoUrl: dashController.shortData!.data![index].videoLink!,
                  videoStatsLink:
                      dashController.shortData!.data![index].videoLink!,
                  controller: dashController.shortData!.data![index].controller,
                  onVideoControllerCreated: (controller) {
                    videoController = controller;
                  },
                  pageController: pageController, // Pass the PageController
                ),
                Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: <Widget>[
                    Row(
                      mainAxisSize: MainAxisSize.max,
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: <Widget>[
                        VideoDescription(
                            "",
                            dashController.shortData!.data![index].videoTitle,
                            "",
                            dashController.shortDetailsResponse != null &&
                                    dashController.shortDetailsResponse!.data !=
                                        null
                                ? dashController.shortDetailsResponse!.data!
                                    .youtubeViewsCount!
                                : "0"),
                        ActionsToolbar(
                            dashController.shortDetailsResponse != null &&
                                    dashController.shortDetailsResponse!.data !=
                                        null
                                ? dashController.shortDetailsResponse!.data!
                                    .youtubeLikesCount!
                                : "0",
                            dashController.shortDetailsResponse != null &&
                                    dashController.shortDetailsResponse!.data !=
                                        null
                                ? dashController.shortDetailsResponse!.data!
                                    .youtubeCommentCount!
                                : "0",
                            "https://www.andersonsobelcosmetic.com/wp-content/uploads/2018/09/chin-implant-vs-fillers-best-for-improving-profile-bellevue-washington-chin-surgery.jpg",
                            "https://www.youtube.com/watch?v=${dashController.shortData!.data![index].videoLink}"),
                      ],
                    ),
                    SizedBox(height: 20)
                  ],
                ),
              ],
            );
          },
        ),
        SafeArea(
          child: Container(
            padding: EdgeInsets.only(top: 20),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                SvgPicture.asset(
                  'assets/icon.svg',
                  height: 30,
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}

class VideoPlayerWidget extends StatefulWidget {
  final String videoUrl;
  final String videoTitle;
  final String videoStatsLink;
  YoutubePlayerController? controller;
  final Function(YoutubePlayerController) onVideoControllerCreated;
  final PageController pageController; // Add PageController

  VideoPlayerWidget({
    Key? key,
    required this.videoUrl,
    required this.videoTitle,
    required this.videoStatsLink,
    required this.onVideoControllerCreated,
    required this.controller,
    required this.pageController, // Add PageController
  }) : super(key: key);

  @override
  _VideoPlayerWidgetState createState() => _VideoPlayerWidgetState();
}

class _VideoPlayerWidgetState extends State<VideoPlayerWidget> {
  late YoutubePlayerController controller;

  @override
  void initState() {
    super.initState();
    final String? videoId = YoutubePlayer.convertUrlToId(widget.videoUrl);
    if (videoId == null) {
      throw Exception('Invalid video URL');
    }
    controller = YoutubePlayerController(
      initialVideoId: videoId,
      flags: YoutubePlayerFlags(
        autoPlay: true,
        mute: false,
      ),
    );
    widget.onVideoControllerCreated(controller);
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GetBuilder<DashController>(
        builder: (dashController) => SizedBox.expand(
              child: YoutubePlayer(
                controller: controller,
                showVideoProgressIndicator: true, // Show the progress indicator
                progressIndicatorColor:
                    Colors.red, // Set the progress bar color to red
                progressColors: ProgressBarColors(
                  playedColor: Colors.red, // Color for played portion
                  handleColor: Colors.redAccent, // Color for the handle
                ),

                onEnded: (metaData) {
                  // Move to next video when the current video ends
                  widget.pageController.nextPage(
                    duration: Duration(milliseconds: 300),
                    curve: Curves.easeInOut,
                  );
                },
              ),
            ));
  }
}

class VideoDescription extends StatelessWidget {
  final username;
  final videtoTitle;
  final songInfo;
  final view;

  VideoDescription(this.username, this.videtoTitle, this.songInfo, this.view);

  @override
  Widget build(BuildContext context) {
    return Expanded(
        child: Container(
            height: 120.0,
            padding: EdgeInsets.only(left: 20.0),
            child: Column(
                mainAxisSize: MainAxisSize.min,
                mainAxisAlignment: MainAxisAlignment.end,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    videtoTitle,
                    maxLines: 3,
                    overflow: TextOverflow.ellipsis,
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(
                    height: 4,
                  ),
                  Row(
                    children: [
                      Text(
                        "$view Views",
                        style: TextStyle(
                            fontSize: 14,
                            color: Colors.white,
                            fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                  SizedBox(
                    height: 10,
                  ),
                ])));
  }
}

class CustomPageViewScrollPhysics extends ScrollPhysics {
  const CustomPageViewScrollPhysics({ScrollPhysics? parent})
      : super(parent: parent);

  @override
  CustomPageViewScrollPhysics applyTo(ScrollPhysics? ancestor) {
    return CustomPageViewScrollPhysics(parent: buildParent(ancestor)!);
  }

  @override
  SpringDescription get spring => const SpringDescription(
        mass: 50,
        stiffness: 100,
        damping: 0.8,
      );
}
