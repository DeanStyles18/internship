import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_html/flutter_html.dart';
import 'package:standups/navigation_bar.dart';
import 'artist_detail_models.dart' as artistDetails;
import 'artist_models.dart' as artistImageModels;

class ArtistBioPage extends StatefulWidget {
  final int artistId;

  ArtistBioPage({required this.artistId});

  @override
  _ArtistBioPageState createState() => _ArtistBioPageState();
}

class _ArtistBioPageState extends State<ArtistBioPage> {
  artistDetails.Data? _artistData;
  String? _artistImage;
  String? _artistName;
  bool _isLoading = true;
  Color? _gradientColor; // Variable to hold the gradient color

  // List of colors to choose from
  final List<Color> extractedColors = [
    Color.fromARGB(255, 131, 17, 29) // Dark Blue
  ];

  @override
  void initState() {
    super.initState();
    // Randomly select a color from the list
    _gradientColor = (extractedColors..shuffle()).first;
    _fetchArtistBioAndImage();
  }

  Future<void> _fetchArtistBioAndImage() async {
    final bioUrl =
        'https://devapi.standups7.com/api/v1/artist/get-public-artist-wiki-bio?artist_id=${widget.artistId}&pageNo=1&itemPerPage=1';
    final artistUrl =
        'https://devapi.standups7.com/api/v1/artist/get-public-artist?artist_id=${widget.artistId}&pageNo=1&itemPerPage=1';

    try {
      // Fetch artist bio
      final bioResponse = await http.get(Uri.parse(bioUrl));
      if (bioResponse.statusCode == 200) {
        final bioJsonResponse = json.decode(bioResponse.body);
        final bioData = artistDetails.Autogenerated.fromJson(bioJsonResponse);
        if (bioData.data != null && bioData.data!.isNotEmpty) {
          setState(() {
            _artistData = bioData.data![0];
          });
        }
      } else {
        throw Exception('Failed to load artist bio');
      }

      // Fetch artist image
      final artistResponse = await http.get(Uri.parse(artistUrl));
      if (artistResponse.statusCode == 200) {
        final artistJsonResponse = json.decode(artistResponse.body);
        final artistData =
            artistImageModels.Autogenerated.fromJson(artistJsonResponse);
        if (artistData.data != null && artistData.data!.isNotEmpty) {
          setState(() {
            _artistImage = artistData.data![0].artistLargeImg;
            _artistName = artistData.data![0].artistName;
          });
        }
      } else {
        throw Exception('Failed to load artist image');
      }

      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      print('Error fetching artist data: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  Widget _buildInfoRow(String label, String? value) {
    return value != null && value.isNotEmpty
        ? Padding(
            padding: const EdgeInsets.symmetric(vertical: 4.0),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '$label: ',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                    color: Color(0xFFFAFAFA),
                  ),
                ),
                Expanded(
                  child: Text(
                    value,
                    style: TextStyle(fontSize: 16, color: Colors.white70),
                  ),
                ),
              ],
            ),
          )
        : SizedBox.shrink();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _isLoading
          ? Center(
              child: CircularProgressIndicator(
                color: Colors.white, // Loading indicator color
              ),
            )
          : _artistData == null
              ? Center(
                  child: Text(
                    'No biography available',
                    style: TextStyle(color: Colors.white, fontSize: 18),
                  ),
                )
              : SingleChildScrollView(
                  child: Padding(
                    padding:
                        const EdgeInsets.only(top: 20.0), // Add top padding
                    child: Column(
                      children: [
                        // Info box similar to Wikipedia
                        Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Container(
                            decoration: BoxDecoration(
                              gradient: LinearGradient(
                                colors: [
                                  _gradientColor!,
                                  Colors.black
                                ], // Gradient colors
                                begin: Alignment.topCenter,
                                end: Alignment.bottomCenter,
                              ),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.white10),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black54,
                                  blurRadius: 6,
                                  offset: Offset(0, 2),
                                ),
                              ],
                            ),
                            padding: const EdgeInsets.all(16.0),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                // Artist image centered
                                CircleAvatar(
                                  radius: 60,
                                  backgroundImage: _artistImage != null
                                      ? NetworkImage(_artistImage!)
                                      : AssetImage('assets/default_avatar.png')
                                          as ImageProvider, // Fallback if no image
                                ),
                                SizedBox(height: 16),
                                // Artist name fetched from data
                                Text(
                                  _artistName ?? 'Unknown Artist',
                                  style: TextStyle(
                                    fontSize: 22,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.white,
                                  ),
                                ),
                                SizedBox(height: 8),

                                Divider(color: Colors.white12),

                                // Personal info section
                                // _buildInfoRow(
                                //     'Born', _artistData!.artistBio ?? 'N/A'),
                                // _buildInfoRow(
                                //     'Birth Place',
                                //     _artistData!. ??
                                //         'Unknown place'),
                                // _buildInfoRow('City', _artistData!.art),
                                // _buildInfoRow(
                                //     'Schooling', _artistData!.artistSchooling),
                                // _buildInfoRow(
                                //     'College', _artistData!.artistAndCollege),
                                // _buildInfoRow(
                                //     'Genre', _artistData!.artistGenre),
                                // _buildInfoRow('Instagram',
                                //     _artistData!.artistInstaHandle),
                                // _buildInfoRow('Facebook',
                                //     _artistData!.artistFacebookHandle),
                              ],
                            ),
                          ),
                        ),
                        // Biography section
                        Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Biography',
                                style: TextStyle(
                                  fontSize: 22,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                              SizedBox(height: 10),
                              // Clean bio text to remove any HTML tags like <br>
                              Html(
                                data: _artistData!.artistBio
                                        ?.replaceAll('<br>', '\n') ??
                                    'No biography available',
                                style: {
                                  'body': Style(
                                    fontSize: FontSize(16),
                                    color: Colors.white70,
                                  ),
                                },
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
      bottomNavigationBar: BottomNavBarWidget(
          currentRoute: '/artist'), // Add the Bottom Navigation Bar
      backgroundColor: Colors.black, // Full page background black
    );
  }
}
