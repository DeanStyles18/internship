import 'package:flutter/material.dart';
import 'api_service.dart';
import 'contants/app_contants.dart';
import 'models/categories_model.dart';
import 'navigation_bar.dart';
import 'category_detail.dart'; 
import 'dart:math';

class CategoryGridPage extends StatefulWidget {
  @override
  _CategoryGridPageState createState() => _CategoryGridPageState();
}

class _CategoryGridPageState extends State<CategoryGridPage> {
  bool _isSearching = false;
  final TextEditingController _searchController = TextEditingController();
  late Future<Autogenerated> futureCategories;
  final ApiService apiService = ApiService(
      'https://devapi.standups7.com/api/v1/category/get-public-categories?pageNo=1&itemPerPage=100');

  List<Data> _allCategories = [];
  List<Data> _filteredCategories = [];
  bool _isLoading = false;

  final List<Color> _colors = [
    Color(0xFFE51E31), // Bright Red
    Color(0xFF158A08), // Bright Green
    Color(0xFF0C72EE), // Bright Blue
    Color(0xFFFF0090), // Magenta
    Color(0xFFDB148B), // Similar Magenta
    Color(0xFFB85D06), // Brown
    Color(0xFFE8125C), // Pink
    Color(0xFF951118), // Dark Maroon
    Color(0xFF1E3264), // Dark Blue
    Color(0xFFA56752), // Beige
  ];

  @override
  void initState() {
    super.initState();
    futureCategories = apiService.fetchCategories();
    _searchController.addListener(_filterCategories);
  }

  @override
  void dispose() {
    _searchController.removeListener(_filterCategories);
    _searchController.dispose();
    super.dispose();
  }

  void _toggleSearch() {
    setState(() {
      _isSearching = !_isSearching;
      if (!_isSearching) {
        _searchController.clear();
        _filteredCategories = List.from(_allCategories);
      }
    });
  }

  void _filterCategories() {
    final query = _searchController.text.toLowerCase();
    setState(() {
      _filteredCategories = _allCategories
          .where((category) =>
              category.categoryName?.toLowerCase().contains(query) ?? false)
          .toList();
    });
  }

  Map<String, List<Data>> _groupCategoriesByFirstLetter(List<Data> categories) {
    final Map<String, List<Data>> groupedCategories = {};

    for (var category in categories) {
      final name = category.categoryName?.trim() ?? '';
      if (name.isNotEmpty) {
        String firstLetter = '';
        for (var char in name.split('')) {
          if (RegExp(r'^[A-Z]$').hasMatch(char.toUpperCase())) {
            firstLetter = char.toUpperCase();
            break;
          }
        }
        if (firstLetter.isNotEmpty) {
          groupedCategories.putIfAbsent(firstLetter, () => []).add(category);
        }
      }
    }

    final sortedGroupedCategories = Map.fromEntries(
      groupedCategories.entries.toList()
        ..sort((e1, e2) => e1.key.compareTo(e2.key)),
    );

    return sortedGroupedCategories;
  }

  @override
  Widget build(BuildContext context) {
    final groupedCategories =
        _groupCategoriesByFirstLetter(_filteredCategories);

    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        elevation: 0,
        automaticallyImplyLeading: false,
        title: AppContents.AppBarImage(),
        actions: [
          IconButton(
            icon: Container(
              padding: EdgeInsets.all(8.0),
              decoration: BoxDecoration(
                color: Color.fromRGBO(169, 4, 20, 1),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: Icon(
                _isSearching ? Icons.clear : Icons.search,
                color: Colors.white,
              ),
            ),
            onPressed: _toggleSearch,
          ),
        ],
      ),
      body: Column(
        children: [
          if (_isSearching)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  hintText: 'Search categories',
                  hintStyle: TextStyle(color: Colors.white),
                  border: OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.grey[800]!),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(
                        color: Color.fromRGBO(169, 4, 20, 1), width: 2.0),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.grey[800]!),
                  ),
                  fillColor: Colors.grey[800],
                  filled: true,
                ),
                style: TextStyle(color: Colors.white),
              ),
            ),
          Expanded(
            child: FutureBuilder<Autogenerated>(
              future: futureCategories,
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  _allCategories = snapshot.data!.data ?? [];
                  if (_filteredCategories.isEmpty) {
                    _filteredCategories = List.from(_allCategories);
                  }

                  final categoriesToDisplay =
                      _isSearching ? _filteredCategories : _allCategories;
                  final groupedCategories =
                      _groupCategoriesByFirstLetter(categoriesToDisplay);

                  return ListView.builder(
                    padding: EdgeInsets.all(16.0),
                    itemCount: groupedCategories.length,
                    itemBuilder: (context, index) {
                      final letter = groupedCategories.keys.elementAt(index);
                      final categoriesForLetter = groupedCategories[letter]!;

                      return Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Padding(
                            padding: const EdgeInsets.symmetric(vertical: 8.0),
                            child: Text(
                              letter,
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 24.0,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          GridView.builder(
                            padding: EdgeInsets.all(8.0),
                            gridDelegate:
                                SliverGridDelegateWithFixedCrossAxisCount(
                              crossAxisCount: 2,
                              crossAxisSpacing: 16.0,
                              mainAxisSpacing: 16.0,
                              childAspectRatio: 1.0,
                            ),
                            itemCount: categoriesForLetter.length,
                            shrinkWrap: true,
                            physics: NeverScrollableScrollPhysics(),
                            itemBuilder: (context, index) {
                              final category = categoriesForLetter[index];
                              final randomColor =
                                  _colors[Random().nextInt(_colors.length)];

                              return GestureDetector(
                                onTap: () {
                                  final categoryId = category.categoriesId ?? 0;
                                  print(
                                      'Navigating to CategoryPage with ID: $categoryId'); 

                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => CategoryPage(
                                        categoryId: categoryId,
                                      ),
                                    ),
                                  );
                                },
                                child: Container(
                                  decoration: BoxDecoration(
                                    color: randomColor,
                                    borderRadius: BorderRadius.circular(16.0),
                                    border: Border.all(
                                      color: Colors.white,
                                      width: 4.0, 
                                    ),
                                  ),
                                  child: Stack(
                                    fit: StackFit.expand,
                                    children: [
                                      ClipRRect(
                                        borderRadius:
                                            BorderRadius.circular(16.0),
                                        child: ColorFiltered(
                                          colorFilter: ColorFilter.mode(
                                            randomColor.withOpacity(
                                                0.6), 
                                            BlendMode.color,
                                          ),
                                          child: Image.asset(
                                            'assets/categories.jpg',
                                            fit: BoxFit.cover,
                                          ),
                                        ),
                                      ),
                                      Container(
                                        decoration: BoxDecoration(
                                          borderRadius:
                                              BorderRadius.circular(16.0),
                                          gradient: LinearGradient(
                                            colors: [
                                              Colors.black.withOpacity(0.3),
                                              Colors.transparent,
                                            ],
                                            begin: Alignment.bottomCenter,
                                            end: Alignment.topCenter,
                                          ),
                                        ),
                                      ),
                                      Center(
                                        child: Text(
                                          category.categoryName ?? 'Unknown',
                                          textAlign: TextAlign.center,
                                          style: TextStyle(
                                            color: Colors.white,
                                            fontSize: 20.0,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                      Positioned(
                                        bottom: 16,
                                        right: 16,
                                        child: Container(
                                          decoration: BoxDecoration(
                                            shape: BoxShape.circle,
                                            border: Border.all(
                                              color: Colors.white,
                                              width: 2.0,
                                            ),
                                            color: Colors.transparent,
                                          ),
                                          padding: EdgeInsets.all(8.0),
                                          child: Icon(
                                            Icons.arrow_forward,
                                            color: Colors.white,
                                            size: 16.0,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              );
                            },
                          ),
                        ],
                      );
                    },
                  );
                } else if (snapshot.hasError) {
                  return Center(
                    child: Text(
                      'Error: ${snapshot.error}',
                      style: TextStyle(color: Colors.white),
                    ),
                  );
                }
                return Center(
                  child: CircularProgressIndicator(color: Colors.white),
                );
              },
            ),
          ),
        ],
      ),
      bottomNavigationBar: BottomNavBarWidget(currentRoute: '/category'),
    );
  }
}
