import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:standups/api/api_url.dart';
import 'package:standups/contants/app_colors.dart';
import 'package:standups/contants/app_contants.dart';
import 'package:youtube_player_flutter/youtube_player_flutter.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'models/videos_model.dart' as video;
import '../models/videos_model.dart' as video_detail;
import 'artist_models.dart' as artist_models;

class VideoDetailPage extends StatefulWidget {
  final String finalVideoPageId;

  VideoDetailPage({required this.finalVideoPageId});

  @override
  _VideoDetailPageState createState() => _VideoDetailPageState();
}

class _VideoDetailPageState extends State<VideoDetailPage> {
  late Future<video_detail.Data> videoData;
  late Future<List<video.Data>> relatedVideos;
  YoutubePlayerController? _youtubePlayerController;
  bool _isPlaying = false;
  bool _isFullscreen = false; 
  Map<int, artist_models.Data> artistMap = {};
  final List<Color> gradientColors = [
    Colors.red,
    Colors.blue,
    Colors.green,
    Colors.orange,
  ];

  @override
  void initState() {
    super.initState();
    videoData = fetchVideoData(widget.finalVideoPageId);
    relatedVideos = fetchRelatedVideos();
    _fetchArtists();
  }

  Future<void> _fetchArtists() async {
    try {
      final response = await http.get(Uri.parse(
          '${ApiUrls.baseURl}artist/get-public-artist?pageNo=1&itemPerPage=500'));

      if (response.statusCode == 200) {
        final jsonResponse = jsonDecode(response.body);
        final artistResponse =
            artist_models.Autogenerated.fromJson(jsonResponse);
        setState(() {
          for (var artist in artistResponse.data!) {
            artistMap[artist.artistId!] = artist;
          }
        });
      } else {
        throw Exception('Failed to load artist data');
      }
    } catch (e) {
      print('Error fetching artists: $e');
    }
  }

  Future<video_detail.Data> fetchVideoData(String id) async {
    try {
      final response = await http.get(Uri.parse(
          '${ApiUrls.baseURl}playlist/get-public-playlist?video_id=$id&shortVideos=false&pageNo=1&itemPerPage=1'));

      if (response.statusCode == 200) {
        final jsonResponse = jsonDecode(response.body);
        final autogenerated = video_detail.Autogenerated.fromJson(jsonResponse);
        return autogenerated.data!.first;
      } else {
        throw Exception('Failed to load video data');
      }
    } catch (e) {
      print('Error fetching video data: $e');
      rethrow;
    }
  }

  Future<List<video.Data>> fetchRelatedVideos() async {
    try {
      final response = await http.get(Uri.parse(
          '${ApiUrls.baseURl}playlist/get-public-playlist?shortVideos=false&pageNo=1&itemPerPage=10'));

      if (response.statusCode == 200) {
        final jsonResponse = jsonDecode(response.body);
        final autogenerated = video.Autogenerated.fromJson(jsonResponse);
        return autogenerated.data ?? [];
      } else {
        throw Exception('Failed to load related videos');
      }
    } catch (e) {
      print('Error fetching related videos: $e');
      rethrow;
    }
  }

  void _toggleFullScreen() {
    if (_youtubePlayerController!.value.isFullScreen) {
      _youtubePlayerController!.toggleFullScreenMode();
      setState(() {
        _isFullscreen = false;
      });
    } else {
      _youtubePlayerController!.toggleFullScreenMode();
      setState(() {
        _isFullscreen = true;
      });
    }
  }

  void _playVideo() {
    setState(() {
      _isPlaying = true;
      if (_youtubePlayerController != null) {
        _youtubePlayerController!.play();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        SystemChrome.setPreferredOrientations(
          <DeviceOrientation>[
            DeviceOrientation.landscapeRight,
            DeviceOrientation.landscapeLeft,
            DeviceOrientation.portraitDown,
            DeviceOrientation.portraitUp,
          ],
        );
        if (_isFullscreen) {
   
          _youtubePlayerController?.toggleFullScreenMode();
          setState(() {
            _isFullscreen = false; 
          });
          Get.back();
          return true;
        } else {
        
          _youtubePlayerController?.pause();
          Get.back();

          return true;
        }
      },
      child: Scaffold(
        backgroundColor: AppColors.backgroundColor,
        body: FutureBuilder<video_detail.Data>(
          future: videoData,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return Center(child: CircularProgressIndicator());
            } else if (snapshot.hasError) {
              return Center(child: Text('Error: ${snapshot.error}'));
            } else if (!snapshot.hasData) {
              return Center(child: Text('No data found'));
            } else {
              final videoDetail = snapshot.data!;
              final videoId = videoDetail.videoLink;

              if (videoId == null) {
                return Center(child: Text('No video link available'));
              }

              if (_youtubePlayerController == null) {
                _youtubePlayerController = YoutubePlayerController(

                  initialVideoId: videoId,
                  flags: YoutubePlayerFlags(
                    autoPlay: false, 
                    mute: false,

                    showLiveFullscreenButton: true,
                    hideControls: false,
                    useHybridComposition: true,
                    enableCaption: true,
                    forceHD: true,

                  ),
                );
              }

              final artist = artistMap[videoDetail.artistId];

              return Stack(
                children: [
                  YoutubePlayerBuilder(
                    player: YoutubePlayer(
                      controller: _youtubePlayerController!,
                      showVideoProgressIndicator: true,
                      progressIndicatorColor: Colors.red,
                      progressColors: ProgressBarColors(
                        playedColor: Colors.red,
                        handleColor: Colors.white,
                      ),
                    ),
                    builder: (context, player) {
                      return SingleChildScrollView(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Video Section
                            Container(
                              height: MediaQuery.of(context).size.height / 3,
                              margin: EdgeInsets.only(
                                  top: MediaQuery.of(context).padding.top),
                              child: player,
                            ),

                            Padding(
                              padding: const EdgeInsets.only(left: 16.0, top: 8.0),
                              child: SvgPicture.asset(
                                'assets/icon.svg',
                                height: 30,
                                width: 30,
                              ),
                            ),

                            // Title Section
                            Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Text(
                                videoDetail.videoTitle ?? 'No title',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),


                            if (artist != null) ...[
                              Container(
                                padding: EdgeInsets.symmetric(horizontal: 16),
                                child: Row(
                                  children: [
                                    CircleAvatar(
                                      backgroundImage: NetworkImage(
                                        artist.artistLargeImg ??
                                            artist.artistMediumImg ??
                                            artist.artistMediumImg ??
                                            '',
                                      ),
                                      radius: 20,
                                    ),
                                    SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        artist.artistName ?? 'Unknown Artist',
                                        style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 16,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ] else ...[
                              Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 16),
                                child: Text(
                                  'Artist data not found',
                                  style: TextStyle(
                                    color: Colors.red,
                                    fontSize: 16,
                                  ),
                                ),
                              ),
                            ],

                            Padding(
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 16.0, vertical: 16.0),
                              child: Row(
                                children: [
                                  Expanded(
                                    child: ElevatedButton(
                                      onPressed: _toggleFullScreen,
                                      style: ElevatedButton.styleFrom(
                                        foregroundColor: Colors.black,
                                        backgroundColor: Colors.white,
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(8.0),
                                        ),
                                      ),
                                      child: Text('Fullscreen'),
                                    ),
                                  ),
                                  SizedBox(width: 16.0),
                                  Expanded(
                                    child: ElevatedButton(
                                      onPressed: () {

                                      },
                                      style: ElevatedButton.styleFrom(
                                        foregroundColor: Colors.black,
                                        backgroundColor: Colors.grey,
                                        shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.circular(8.0),
                                        ),
                                      ),
                                      child: Text('Subscribe'),
                                    ),
                                  ),
                                ],
                              ),
                            ),


                            Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Text(
                                'Related Videos',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                            FutureBuilder<List<video.Data>>(
                              future: relatedVideos,
                              builder: (context, snapshot) {
                                if (snapshot.connectionState ==
                                    ConnectionState.waiting) {
                                  return Center(child: CircularProgressIndicator());
                                } else if (snapshot.hasError) {
                                  return Center(
                                      child: Text('Error: ${snapshot.error}'));
                                } else if (!snapshot.hasData ||
                                    snapshot.data!.isEmpty) {
                                  return Center(
                                      child: Text('No related videos found'));
                                } else {
                                  return ListView.builder(
                                    shrinkWrap: true,
                                    physics: NeverScrollableScrollPhysics(),
                                    itemCount: snapshot.data!.length,
                                    itemBuilder: (context, index) {
                                      final relatedVideo = snapshot.data![index];
                                      final gradientColor = gradientColors[
                                          index % gradientColors.length];

                                      return AppContents.videoWidget(context, relatedVideo.videosFinalDataId.toString(), gradientColor, relatedVideo.videoMediumImg.toString(), relatedVideo.videoTitle.toString(), relatedVideo.videoDuration.toString(),  () {

                                        _youtubePlayerController?.pause();

                                        Navigator.of(context).pushReplacement(
                                          MaterialPageRoute(
                                            builder: (context) => VideoDetailPage(
                                              finalVideoPageId:
                                              relatedVideo.videosFinalDataId!.toString(),
                                            ),
                                          ),
                                        );
                                      },);

                                      /*GestureDetector(
                                        onTap: () {

                                          _youtubePlayerController?.pause();

                                          Navigator.of(context).pushReplacement(
                                            MaterialPageRoute(
                                              builder: (context) => VideoDetailPage(
                                                finalVideoPageId:
                                                    relatedVideo.videosFinalDataId!.toString(),
                                              ),
                                            ),
                                          );
                                        },
                                        child: Container(
                                          height: 100,
                                          margin: EdgeInsets.symmetric(horizontal: 15,vertical: 10),
                                          decoration: BoxDecoration(
                                            color: AppColors.backgroundColor,
                                            borderRadius:
                                                BorderRadius.circular(4),

                                            border: Border.all(
                                              color: gradientColor,
                                              width: 1.0,
                                            ),
                                          ),
                                          padding: const EdgeInsets.all(8.0),
                                          child: Row(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Expanded(
                                                flex:3,
                                                child: CachedNetworkImage(
                                                  imageUrl: relatedVideo
                                                          .videoMediumImg ??
                                                      '',
                                                  width: double.infinity,
                                                  height: 80,
                                                  fit: BoxFit.cover,
                                                  imageBuilder: (context,
                                                          imageProvider) =>
                                                      Container(
                                                    decoration: BoxDecoration(
                                                      borderRadius:
                                                          BorderRadius.circular(
                                                              0),
                                                      image: DecorationImage(
                                                        image: imageProvider,
                                                        fit: BoxFit.cover,
                                                        colorFilter:
                                                            ColorFilter.mode(
                                                          Colors.black
                                                              .withOpacity(0.2),
                                                          BlendMode.darken,
                                                        ),
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              ),
                                              Expanded(
                                                flex: 7,
                                                child: Padding(
                                                  padding: const EdgeInsets.symmetric(horizontal: 8.0),
                                                  child: Column(
                                                    crossAxisAlignment:
                                                        CrossAxisAlignment.start,
                                                    children: [
                                                      // Removed artist avatar from here

                                                      Text(
                                                        relatedVideo
                                                                .videoTitle ??
                                                            'No title',
                                                        style: TextStyle(
                                                          color: Colors.white,
                                                          fontWeight:
                                                              FontWeight.bold,
                                                          fontSize: 14,
                                                        ),
                                                        maxLines: 2,
                                                        overflow: TextOverflow
                                                            .ellipsis,
                                                      ),
                                                      SizedBox(height: 8,),
                                                      Text(
                                                        relatedVideo
                                                            .artistName!,
                                                        style: TextStyle(
                                                          color: Colors.white.withOpacity(0.6),

                                                          fontSize: 12,
                                                        ),
                                                        maxLines: 2,
                                                        overflow: TextOverflow
                                                            .ellipsis,
                                                      ),

                                                    ],
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      );*/
                                    },
                                  );
                                }
                              },
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                  AppContents.backFunctionWidget(context)
                ],
              );
            }
          },
        ),
      ),
    );
  }

  @override
  void dispose() {
    _youtubePlayerController?.dispose();
    super.dispose();
  }
}
