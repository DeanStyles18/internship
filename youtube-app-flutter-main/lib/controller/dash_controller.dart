import 'package:get/get.dart';
import 'package:standups/repo/dash_repo.dart';
import 'package:standups/models/shorts_model.dart' as shorts;
import 'package:standups/artist_models.dart' as artist_models;

import '../artist_models.dart';
import '../models/short_details_response.dart'as short;
import '../models/videos_model.dart'as video;

class DashController extends GetxController implements GetxService{

  DashRepo Repo;
  DashController({required this.Repo});

  bool isPlayListLoading = false;
  bool isDashLoading = false;
  bool isArtistLoading = false;
  bool artistLoadMore = false;
  int prevVideo = 0;
  shorts.Autogenerated? shortData  = shorts.Autogenerated();
  short.ShortDetailsResponse? shortDetailsResponse = short.ShortDetailsResponse();
  artist_models.Autogenerated? artistListResponse = artist_models.Autogenerated();
  video.Autogenerated? videoListResponse = video.Autogenerated();
  List<Data> allArtists = [];

  Future<void> getPublicPlayList({int? page,String? videoId}) async {

    if(page ==1){
      shortData = null;
      isPlayListLoading = true;
    }

    update();
    Response response = await Repo.getPublicPlayList(page: page,videoId: videoId);
    if (response.statusCode == 200 || response.statusCode == 400) {

        if(page ==1){
          shortData = shorts.Autogenerated.fromJson(response.body);
          if(shortData!=null && shortData!.data!=null && shortData!.data!.isNotEmpty){

            loadVideo(0);

              getVideoDetails(videoId:shortData!.data![0].videoLink!);


            update();


          }
        }
        else {
          shorts.Autogenerated? shortData2 = shorts.Autogenerated.fromJson(response.body);
          shortData!.data!.addAll(shortData2.data!);

        }




    }
    isPlayListLoading = false;
    update();
  }

  Future<void> getPublicPlayListHome({int? page,String? videoId}) async {

    if(page ==1){
      videoListResponse = null;
      isDashLoading = true;
    }

    update();
    Response response = await Repo.getPublicPlayListHome(page: page,videoId: videoId);
    if (response.statusCode == 200 || response.statusCode == 400) {

        if(page ==1){
          videoListResponse = video.Autogenerated.fromJson(response.body);

        }
        else {
          video.Autogenerated? shortData2 = video.Autogenerated.fromJson(response.body);
          videoListResponse!.data!.addAll(shortData2.data!);

        }




    }
    isDashLoading = false;
    update();
  }

  Future<void> getArtistData({int? page,int? item}) async {

    if(page ==1){
      artistListResponse = null;
      isArtistLoading = true;
    }else {
      artistLoadMore = true;
    }

    update();
    Response response = await Repo.getArtist(page: page,item: item);
    if (response.statusCode == 200 || response.statusCode == 400) {

        if(page ==1){
          artistListResponse = artist_models.Autogenerated.fromJson(response.body);


        }
        else {
          artist_models.Autogenerated? shortData2 = artist_models.Autogenerated.fromJson(response.body);
          artistListResponse!.data!.addAll(shortData2.data!);

        }





    }
    isArtistLoading = false;
    artistLoadMore = false;
    update();
  }

  void loadVideo(int index) async {
    if (shortData!.data!.length > index) {
      await shortData!.data![index].loadController();
      shortData!.data![index].controller?.play();
      update();
    }
  }

  changeVideo(index) async {
    if (shortData!.data![index].controller == null) {
      await shortData!.data![index].loadController();
    }
    shortData!.data![index].controller!.play();
    //videoSource.listVideos[prevVideo].controller.removeListener(() {});

    if ( shortData!.data![prevVideo].controller != null)
      shortData!.data![prevVideo].controller!.pause();

    prevVideo = index;
    print(index);

    update();
  }

  Future<void> getArtistDetails({int? id}) async {

    /*if(page ==1){
      artistListResponse = null;
      isArtistLoading = true;
    }*/

    update();
    Response response = await Repo.getArtistData(id: id);
    if (response.statusCode == 200 || response.statusCode == 400) {

        /*if(page ==1){
          artistListResponse = artist_models.Autogenerated.fromJson(response.body);
        }
        else {
          artist_models.Autogenerated? shortData2 = artist_models.Autogenerated.fromJson(response.body);
          artistListResponse!.data!.addAll(shortData2.data!);

        }*/


    }
    isArtistLoading = false;
    update();
  }

  Future<void> getVideoDetails({String? videoId}) async {

    shortDetailsResponse =null;

    /*if(page ==1){
      artistListResponse = null;
      isArtistLoading = true;
    }*/

    update();
    Response response = await Repo.getVideoDetails(videoLink: videoId);
    if (response.statusCode == 200 || response.statusCode == 400) {
      shortDetailsResponse = short.ShortDetailsResponse.fromJson(response.body);

        /*if(page ==1){
          artistListResponse = artist_models.Autogenerated.fromJson(response.body);
        }
        else {
          artist_models.Autogenerated? shortData2 = artist_models.Autogenerated.fromJson(response.body);
          artistListResponse!.data!.addAll(shortData2.data!);

        }*/


    }
    isArtistLoading = false;
    update();
  }
}